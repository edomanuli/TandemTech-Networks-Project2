// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace TandemTechAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.AssignedNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("int");

                    b.Property<int>("UserPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumberId")
                        .IsUnique();

                    b.HasIndex("UserPlanId");

                    b.ToTable("AssignedNumbers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PhoneNumberId = 1,
                            UserPlanId = 1
                        },
                        new
                        {
                            Id = 2,
                            PhoneNumberId = 6,
                            UserPlanId = 2
                        },
                        new
                        {
                            Id = 3,
                            PhoneNumberId = 7,
                            UserPlanId = 3
                        },
                        new
                        {
                            Id = 4,
                            PhoneNumberId = 8,
                            UserPlanId = 4
                        },
                        new
                        {
                            Id = 5,
                            PhoneNumberId = 9,
                            UserPlanId = 5
                        },
                        new
                        {
                            Id = 6,
                            PhoneNumberId = 10,
                            UserPlanId = 6
                        });
                });

            modelBuilder.Entity("Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedNumberId")
                        .HasColumnType("int");

                    b.Property<int>("DeviceInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedNumberId")
                        .IsUnique();

                    b.HasIndex("DeviceInfoId");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedNumberId = 1,
                            DeviceInfoId = 3,
                            Name = "My iPhone 13 Mini",
                            Serial = "EM12345"
                        },
                        new
                        {
                            Id = 2,
                            AssignedNumberId = 2,
                            DeviceInfoId = 9,
                            Name = "Jake's Galaxy Z Fold 3",
                            Serial = "LM54321"
                        },
                        new
                        {
                            Id = 3,
                            AssignedNumberId = 3,
                            DeviceInfoId = 15,
                            Name = "Dad's Pixel 3a",
                            Serial = "LM98765"
                        },
                        new
                        {
                            Id = 4,
                            AssignedNumberId = 4,
                            DeviceInfoId = 22,
                            Name = "Mom's Xiaomi Redmi Note 11",
                            Serial = "LM13579"
                        },
                        new
                        {
                            Id = 5,
                            AssignedNumberId = 5,
                            DeviceInfoId = 6,
                            Name = "My Samsung Galaxy S21",
                            Serial = "LM24680"
                        },
                        new
                        {
                            Id = 6,
                            AssignedNumberId = 6,
                            DeviceInfoId = 2,
                            Name = "Sara's iPhone 13 Pro",
                            Serial = "LM11223"
                        });
                });

            modelBuilder.Entity("Entities.DeviceInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DeviceInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Manufacturer = "Apple",
                            Model = "iPhone 13"
                        },
                        new
                        {
                            Id = 2,
                            Manufacturer = "Apple",
                            Model = "iPhone 13 Pro"
                        },
                        new
                        {
                            Id = 3,
                            Manufacturer = "Apple",
                            Model = "iPhone 13 Mini"
                        },
                        new
                        {
                            Id = 4,
                            Manufacturer = "Apple",
                            Model = "iPhone SE"
                        },
                        new
                        {
                            Id = 5,
                            Manufacturer = "Apple",
                            Model = "iPhone 12"
                        },
                        new
                        {
                            Id = 6,
                            Manufacturer = "Samsung",
                            Model = "Galaxy S21"
                        },
                        new
                        {
                            Id = 7,
                            Manufacturer = "Samsung",
                            Model = "Galaxy Note 20"
                        },
                        new
                        {
                            Id = 8,
                            Manufacturer = "Samsung",
                            Model = "Galaxy A52"
                        },
                        new
                        {
                            Id = 9,
                            Manufacturer = "Samsung",
                            Model = "Galaxy Z Fold 3"
                        },
                        new
                        {
                            Id = 10,
                            Manufacturer = "Samsung",
                            Model = "Galaxy S20 FE"
                        },
                        new
                        {
                            Id = 11,
                            Manufacturer = "Google",
                            Model = "Pixel 6"
                        },
                        new
                        {
                            Id = 12,
                            Manufacturer = "Google",
                            Model = "Pixel 5a"
                        },
                        new
                        {
                            Id = 13,
                            Manufacturer = "Google",
                            Model = "Pixel 4a 5G"
                        },
                        new
                        {
                            Id = 14,
                            Manufacturer = "Google",
                            Model = "Pixel 4 XL"
                        },
                        new
                        {
                            Id = 15,
                            Manufacturer = "Google",
                            Model = "Pixel 3a"
                        },
                        new
                        {
                            Id = 16,
                            Manufacturer = "OnePlus",
                            Model = "OnePlus 9 Pro"
                        },
                        new
                        {
                            Id = 17,
                            Manufacturer = "OnePlus",
                            Model = "OnePlus 9"
                        },
                        new
                        {
                            Id = 18,
                            Manufacturer = "OnePlus",
                            Model = "OnePlus Nord 2"
                        },
                        new
                        {
                            Id = 19,
                            Manufacturer = "OnePlus",
                            Model = "OnePlus 8T"
                        },
                        new
                        {
                            Id = 20,
                            Manufacturer = "OnePlus",
                            Model = "OnePlus 8 Pro"
                        },
                        new
                        {
                            Id = 21,
                            Manufacturer = "Xiaomi",
                            Model = "Xiaomi 11T Pro"
                        },
                        new
                        {
                            Id = 22,
                            Manufacturer = "Xiaomi",
                            Model = "Xiaomi Redmi Note 11"
                        },
                        new
                        {
                            Id = 23,
                            Manufacturer = "Xiaomi",
                            Model = "Xiaomi Mi 11 Lite"
                        },
                        new
                        {
                            Id = 24,
                            Manufacturer = "Xiaomi",
                            Model = "Xiaomi Poco X4 Pro"
                        },
                        new
                        {
                            Id = 25,
                            Manufacturer = "Xiaomi",
                            Model = "Xiaomi Mi Mix 4"
                        });
                });

            modelBuilder.Entity("Entities.MonthlyBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BillingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MonthlyBills");
                });

            modelBuilder.Entity("Entities.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPorted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("PhoneNumbers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsPorted = false,
                            Number = "6035550100"
                        },
                        new
                        {
                            Id = 2,
                            IsPorted = false,
                            Number = "6035550101"
                        },
                        new
                        {
                            Id = 3,
                            IsPorted = false,
                            Number = "6035550102"
                        },
                        new
                        {
                            Id = 4,
                            IsPorted = false,
                            Number = "6035550103"
                        },
                        new
                        {
                            Id = 5,
                            IsPorted = false,
                            Number = "6035550104"
                        },
                        new
                        {
                            Id = 6,
                            IsPorted = false,
                            Number = "2025550100"
                        },
                        new
                        {
                            Id = 7,
                            IsPorted = false,
                            Number = "2025550101"
                        },
                        new
                        {
                            Id = 8,
                            IsPorted = false,
                            Number = "2025550102"
                        },
                        new
                        {
                            Id = 9,
                            IsPorted = false,
                            Number = "2025550103"
                        },
                        new
                        {
                            Id = 10,
                            IsPorted = false,
                            Number = "2025550104"
                        },
                        new
                        {
                            Id = 11,
                            IsPorted = false,
                            Number = "3055550100"
                        },
                        new
                        {
                            Id = 12,
                            IsPorted = false,
                            Number = "3055550101"
                        },
                        new
                        {
                            Id = 13,
                            IsPorted = false,
                            Number = "3055550102"
                        },
                        new
                        {
                            Id = 14,
                            IsPorted = false,
                            Number = "3055550103"
                        },
                        new
                        {
                            Id = 15,
                            IsPorted = false,
                            Number = "3055550104"
                        },
                        new
                        {
                            Id = 16,
                            IsPorted = false,
                            Number = "4155550100"
                        },
                        new
                        {
                            Id = 17,
                            IsPorted = false,
                            Number = "4155550101"
                        },
                        new
                        {
                            Id = 18,
                            IsPorted = false,
                            Number = "4155550102"
                        },
                        new
                        {
                            Id = 19,
                            IsPorted = false,
                            Number = "4155550103"
                        },
                        new
                        {
                            Id = 20,
                            IsPorted = false,
                            Number = "4155550104"
                        },
                        new
                        {
                            Id = 21,
                            IsPorted = false,
                            Number = "7025550100"
                        },
                        new
                        {
                            Id = 22,
                            IsPorted = false,
                            Number = "7025550101"
                        },
                        new
                        {
                            Id = 23,
                            IsPorted = false,
                            Number = "7025550102"
                        },
                        new
                        {
                            Id = 24,
                            IsPorted = false,
                            Number = "7025550103"
                        },
                        new
                        {
                            Id = 25,
                            IsPorted = false,
                            Number = "7025550104"
                        });
                });

            modelBuilder.Entity("Entities.PlanBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BillingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.ToTable("PlanBills");
                });

            modelBuilder.Entity("Entities.PlanInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DataLimit")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceLimit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("PlanInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataLimit = 5,
                            Description = "Stay connected with our Basic Plan, perfect for calls, messages, and browsing with a generous 5GB data limit.",
                            DeviceLimit = 1,
                            Name = "Basic Plan",
                            Price = 30m
                        },
                        new
                        {
                            Id = 2,
                            DataLimit = 10,
                            Description = "Upgrade to our Standard Plan for more data and the flexibility to connect two devices. Enjoy browsing, streaming, and sharing with 10GB of data.",
                            DeviceLimit = 2,
                            Name = "Standard Plan",
                            Price = 40m
                        },
                        new
                        {
                            Id = 3,
                            DataLimit = 0,
                            Description = "Get the ultimate experience with our Premium Plan. Stream, game, and connect with multiple devices effortlessly with unlimited data.",
                            DeviceLimit = 5,
                            Name = "Premium Plan",
                            Price = 60m
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0084c57-57f8-4652-a515-e77f4b286968",
                            Email = "anuli@example.com",
                            EmailConfirmed = false,
                            FirstName = "Anuli",
                            LastName = "Edom",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANULI@EXAMPLE.COM",
                            NormalizedUserName = "ANULI",
                            PasswordHash = "AQAAAAIAAYagAAAAENSlEqNvL9u9O+Uae4NpWFX7pht/79xOjHvpeUUtuKiQrHBL27Up2i6N9Tlipsamlw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "anuli"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4783bd90-9002-49d2-b75e-25345b481267",
                            Email = "CHRIS@example.com",
                            EmailConfirmed = false,
                            FirstName = "Chris",
                            LastName = "Leipold",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHRIS@EXAMPLE.COM",
                            NormalizedUserName = "CHRIS",
                            PasswordHash = "AQAAAAIAAYagAAAAEBh3w+A/LNoHlGK94p8pGqFMKA35oCuJoS2qA9BIiR8rKE17bBLSBdO5gq9zd2fXkA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "chris"
                        });
                });

            modelBuilder.Entity("Entities.UserPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanInfoId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPlans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnrollmentDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanInfoId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            EnrollmentDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanInfoId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            EnrollmentDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanInfoId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            EnrollmentDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanInfoId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            EnrollmentDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanInfoId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            EnrollmentDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanInfoId = 3,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.AssignedNumber", b =>
                {
                    b.HasOne("Entities.PhoneNumber", "PhoneNumber")
                        .WithOne("AssignedNumber")
                        .HasForeignKey("Entities.AssignedNumber", "PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.UserPlan", "UserPlan")
                        .WithMany("AssignedNumbers")
                        .HasForeignKey("UserPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhoneNumber");

                    b.Navigation("UserPlan");
                });

            modelBuilder.Entity("Entities.Device", b =>
                {
                    b.HasOne("Entities.AssignedNumber", "AssignedNumber")
                        .WithOne()
                        .HasForeignKey("Entities.Device", "AssignedNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DeviceInfo", "DeviceInfo")
                        .WithMany()
                        .HasForeignKey("DeviceInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedNumber");

                    b.Navigation("DeviceInfo");
                });

            modelBuilder.Entity("Entities.MonthlyBill", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithMany("Bills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.PlanBill", b =>
                {
                    b.HasOne("Entities.MonthlyBill", "MonthlyBill")
                        .WithMany("PlanBills")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonthlyBill");
                });

            modelBuilder.Entity("Entities.UserPlan", b =>
                {
                    b.HasOne("Entities.PlanInfo", "PlanInfo")
                        .WithMany("UserPlans")
                        .HasForeignKey("PlanInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", "User")
                        .WithMany("UserPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.MonthlyBill", b =>
                {
                    b.Navigation("PlanBills");
                });

            modelBuilder.Entity("Entities.PhoneNumber", b =>
                {
                    b.Navigation("AssignedNumber");
                });

            modelBuilder.Entity("Entities.PlanInfo", b =>
                {
                    b.Navigation("UserPlans");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("UserPlans");
                });

            modelBuilder.Entity("Entities.UserPlan", b =>
                {
                    b.Navigation("AssignedNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
